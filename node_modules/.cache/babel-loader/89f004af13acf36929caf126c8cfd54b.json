{"ast":null,"code":"import axios from 'axios';\nimport API from './api.js';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'username';\nexport const TOKEN_SESSION_ATTRIBUTE_NAME = 'access_token';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(username, password) {\n    return API.post(`login`, {\n      userName: username,\n      userPassword: password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(TOKEN_SESSION_ATTRIBUTE_NAME, token);\n  }\n\n  register(username, email, password) {\n    return API.post(`register`, {\n      userName: username,\n      userEmail: email,\n      userPassword: password\n    });\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.removeItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let token = sessionStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default AuthenticationService;","map":{"version":3,"sources":["/Users/owner/Desktop/Team-up-learning_front/src/Utils/Authentication.js"],"names":["axios","API","USER_NAME_SESSION_ATTRIBUTE_NAME","TOKEN_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","username","password","post","userName","userPassword","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","register","email","userEmail","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","setupAxiosInterceptors","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,UAAzC;AACP,OAAO,MAAMC,4BAA4B,GAAG,cAArC;;AAEP,MAAMC,qBAAN,CAA6B;AAEzBC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAON,GAAG,CAACO,IAAJ,CAAU,OAAV,EAAkB;AACrBC,MAAAA,QAAQ,EAAEH,QADW;AAErBI,MAAAA,YAAY,EAAEH;AAFO,KAAlB,CAAP;AAIH;;AAEDI,EAAAA,6BAA6B,CAACL,QAAD,EAAWM,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,EAAyDI,QAAzD;AACAO,IAAAA,cAAc,CAACC,OAAf,CAAuBX,4BAAvB,EAAqDS,KAArD;AACH;;AAGDG,EAAAA,QAAQ,CAACT,QAAD,EAAWU,KAAX,EAAkBT,QAAlB,EAA4B;AAClC,WAAON,GAAG,CAACO,IAAJ,CAAU,UAAV,EAAqB;AAC1BC,MAAAA,QAAQ,EAAEH,QADgB;AAE1BW,MAAAA,SAAS,EAAED,KAFe;AAG1BN,MAAAA,YAAY,EAAEH;AAHY,KAArB,CAAP;AAKD;;AAEDW,EAAAA,MAAM,GAAG;AACLL,IAAAA,cAAc,CAACM,UAAf,CAA0BjB,gCAA1B;AACAW,IAAAA,cAAc,CAACM,UAAf,CAA0BhB,4BAA1B;AACH;;AAEDiB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGR,cAAc,CAACS,OAAf,CAAuBpB,gCAAvB,CAAX;AACA,QAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGR,cAAc,CAACS,OAAf,CAAuBpB,gCAAvB,CAAX;AACA,QAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDG,EAAAA,sBAAsB,GAAG;AACrB,QAAIZ,KAAK,GAAGC,cAAc,CAACS,OAAf,CAAuBnB,4BAAvB,CAAZ;AACAH,IAAAA,KAAK,CAACyB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BlB,KAA/B;AACH;;AACD,aAAOgB,MAAP;AACH,KANL;AAQH;;AAlDwB;;AAqD7B,eAAexB,qBAAf","sourcesContent":["import axios from 'axios'\nimport API from './api.js';\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'username';\nexport const TOKEN_SESSION_ATTRIBUTE_NAME = 'access_token';\n\nclass AuthenticationService  {\n\n    executeJwtAuthenticationService(username, password) {\n        return API.post(`login`, {\n            userName: username,\n            userPassword: password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        sessionStorage.setItem(TOKEN_SESSION_ATTRIBUTE_NAME, token)\n    }\n\n\n    register(username, email, password) {\n      return API.post(`register`, {\n        userName: username,\n        userEmail: email,\n        userPassword: password\n      });\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        sessionStorage.removeItem(TOKEN_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors() {\n        let token = sessionStorage.getItem(TOKEN_SESSION_ATTRIBUTE_NAME)\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default AuthenticationService;\n"]},"metadata":{},"sourceType":"module"}